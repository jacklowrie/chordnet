# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Pipeline
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating system to run on'
        required: true
        type: string
      python-version:
        description: 'Python version to use'
        required: false
        type: string
      run-lint:
        description: 'Whether to run linting'
        required: false
        type: boolean
        default: true
      run-typecheck:
        description: 'Whether to run type checking'
        required: false
        type: boolean
        default: true
      run-test:
        description: 'Whether to run tests'
        required: false
        type: boolean
        default: true
      run-build:
        description: 'Whether to run build'
        required: false
        type: boolean
        default: false

jobs:
  pipeline:
    runs-on: ${{ inputs.os }}

    steps:
    - uses: actions/checkout@v4


    - id: py-version
      name: Resolve Python Version
      shell: bash
      run: |
          if [ -z "${{ steps.py-version.outputs.py_version }}" ]; then
            echo "No python-version input provided, reading from .python-version file"
            PY_VER=$(cat .python-version)
          else
            echo "Using python-version input: ${{ steps.py-version.outputs.py_version }}"
            PY_VER="${{ steps.py-version.outputs.py_version }}"
          fi
          echo "py_version=$PY_VER" >> $GITHUB_OUTPUT



    # setup
    - name: Set up Python ${{ steps.py-version.outputs.py_version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ steps.py-version.outputs.py_version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ steps.py-version.outputs.py_version }}
        enable-cache: true



    # validate code. make sure it's linted/typechecked, and passing all tests as flagged.
    - name: Install chordnet dependencies
      run: uv sync --frozen --all-extras --dev

    - name: Run linter
      if: ${{ inputs.run-lint }}
      run: uv run ruff check --output-format=github .

    - name: Run typechecker
      if: ${{ inputs.run-typecheck }}
      run: uv run mypy

    - name: Run tests
      if: ${{ inputs.run-test }}
      run: uv run pytest



    # build distribution if flagged
    - name: Run build
      if: ${{ inputs.run-build }}
      run: uv build

    - name: Upload distributions
      if: ${{ inputs.run-build }}
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: dist/
